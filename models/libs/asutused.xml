<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
  <grid>
    <sql>SELECT a.*, $2::INTEGER AS userId, a.kehtivus AS valid
                    FROM cur_asutused a
                    WHERE libs.check_asutus(a.id::INTEGER, $1::INTEGER)</sql>
    <alias>curAsutused</alias>
  </grid>
  <select>
    <sql>SELECT *,
                     $2::INTEGER                                     AS userid,
                     'ASUTUSED'                                      AS doc_type_id,
                     (properties -&gt;&gt; 'pank')::VARCHAR(20)            AS pank,
                     (properties -&gt;&gt; 'kmkr')::VARCHAR(20)            AS kmkr,
                     (properties -&gt;&gt; 'kehtivus')::DATE               AS kehtivus,
                     (properties -&gt;&gt; 'kehtivus')::DATE               AS valid,
                     (properties -&gt; 'asutus_aa' -&gt; 0 -&gt;&gt; 'aa')::TEXT AS aa,
                     (properties -&gt;&gt; 'palk_email'):: VARCHAR(254)    AS palk_email
              FROM libs.asutus
              WHERE id = $1</sql>
    <sqlAsNew>select $1::integer as id , $2::integer as userid, 'ASUTUSED' as doc_type_id,
            ''::text as  regkood,
            ''::text as nimetus,
            ''::text as omvorm,
            ''::text as aadress,
            ''::text as kontakt,
            ''::text as tel,
            ''::text as faks,
            ''::text as email,
            null::text as muud,
            ''::text as tp,
            0::integer as staatus,
            ''::varchar(20) as pank,
            '' :: VARCHAR(254)    AS palk_email,            
            ''::varchar(20) as kmkr,
            ''::text as mark,
            ''::TEXT AS aa</sqlAsNew>
    <query />
    <multiple>false</multiple>
    <alias>row</alias>
  </select>
  <select>
    <sql>SELECT (e.element -&gt;&gt; 'aa') :: VARCHAR(20) AS aa,
                         $2 :: INTEGER                       AS userid
                  FROM libs.asutus a,
                       json_array_elements(CASE
                                               WHEN (a.properties -&gt;&gt; 'asutus_aa') IS NULL THEN '[]'::JSON
                                               ELSE (a.properties -&gt; 'asutus_aa') :: JSON END) AS e (element)
                  WHERE a.id = $1</sql>
    <query />
    <multiple>true</multiple>
    <alias>asutus_aa</alias>
  </select>
  <select>
    <sql>SELECT Asutus.id
                  FROM libs.asutus Asutus
                  WHERE (upper(rtrim(ltrim(Asutus.regkood))) = upper($1) OR empty($1))
                    AND (upper(rtrim(ltrim(Asutus.nimetus))) = upper($2) OR empty($2))</sql>
    <query />
    <multiple>false</multiple>
    <alias>validate_asutus</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>SELECT rekl.get_luba_number($1,
                                              (SELECT rekvid FROM ou.userid WHERE id = $2 LIMIT 1))::VARCHAR(20) AS number</sql>
    <query />
    <multiple>false</multiple>
    <alias>rekl_number</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>SELECT *
                  FROM jsonb_to_recordset(
                               get_asutus_kasutus($2::INTEGER, $3::DATE,
                                                  $1::INTEGER)
                           ) AS x (error_message TEXT, error_code INTEGER)
                  WHERE error_message IS NOT NULL
            </sql>
    <query />
    <multiple>true</multiple>
    <alias>validate_lib_usage</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <select>
    <sql>SELECT d.*
                  FROM docs.dokumendid($1) d</sql>
    <query />
    <multiple>true</multiple>
    <alias>dokumenidid</alias>
    <not_initial_load>true</not_initial_load>
  </select>
  <selectAsLibs>
    <sql>SELECT *, kehtivus AS valid
                   FROM com_asutused a
                   WHERE libs.check_asutus(a.id::INTEGER, $1::INTEGER)
                     AND (kehtivus IS NULL OR kehtivus &gt;= date())
                   ORDER BY nimetus</sql>
    <alias>selectAsLibs</alias>
  </selectAsLibs>
  <saveDoc>
    <sql>select libs.sp_salvesta_asutus($1::json, $2::integer, $3::integer) as id</sql>
    <alias>saveDoc</alias>
  </saveDoc>
  <deleteDoc>
    <sql>SELECT error_code, result, error_message
                FROM libs.sp_delete_asutus($1::INTEGER, $2::INTEGER)</sql>
    <alias>deleteDoc</alias>
  </deleteDoc>
  <requiredFields>
    <validate>regkood,nimetus,omvorm</validate>
  </requiredFields>
  <executeSql>
    <sql></sql>
    <alias></alias>
  </executeSql>
  <executeCommand>
    <sql></sql>
    <alias></alias>
  </executeCommand>
  <register>
    <sql></sql>
    <alias></alias>
  </register>
  <endProcess>
    <sql />
    <alias />
  </endProcess>
  <generateJournal>
    <sql />
    <alias />
  </generateJournal>
  <print>
    <view>asutus_register</view>
    <params>id</params>
  </print>
  <print>
    <view>asutus_register</view>
    <params>sqlWhere</params>
  </print>
  <getLog>
    <sql>SELECT ROW_NUMBER() OVER ()              AS id,
                         (ajalugu -&gt;&gt; 'user')::VARCHAR(20) AS kasutaja,
                         coalesce(to_char((ajalugu -&gt;&gt; 'created')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS koostatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'updated')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS muudatud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'print')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS prinditud,
                         coalesce(to_char((ajalugu -&gt;&gt; 'deleted')::TIMESTAMP, 'DD.MM.YYYY HH.MM.SS'),
                                  '')::VARCHAR(20)         AS kustutatud

                  FROM (
                           SELECT jsonb_array_elements('[]'::JSONB || d.ajalugu::JSONB) AS ajalugu, d.id
                           FROM libs.asutus d,
                                ou.userid u
                           WHERE d.id = $1
                             AND u.id = $2
                       ) qry
                  WHERE (ajalugu -&gt;&gt; 'user') IS NOT NULL</sql>
    <alias>getLogs</alias>
  </getLog>
</VFPData>
